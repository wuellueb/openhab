/**
 * Copyright (c) 2010-2015, openHAB.org and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
/*
* generated by Xtext
*/
package org.openhab.model.ui.contentassist;

import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.openhab.core.items.GroupItem;
import org.openhab.core.items.Item;
import org.openhab.core.items.ItemRegistry;
import org.openhab.designer.ui.UIActivator;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class ItemsProposalProvider extends AbstractItemsProposalProvider {

	protected static final Set<String> ITEMTYPES = new HashSet<String>();
	
	static {
		ITEMTYPES.add("Group");
		ITEMTYPES.add("Switch");
		ITEMTYPES.add("Number");
		ITEMTYPES.add("String");
		ITEMTYPES.add("Dimmer");
		ITEMTYPES.add("Color");
		ITEMTYPES.add("Contact");
		ITEMTYPES.add("Rollershutter");
		ITEMTYPES.add("DateTime");
		ITEMTYPES.add("Location");
	}
	
	@Override
	public void completeModelNormalItem_Type(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeModelNormalItem_Type(model, assignment, context, acceptor);
		for(String itemType : ITEMTYPES) {
			if(itemType.startsWith(context.getPrefix())) {
				acceptor.accept(createCompletionProposal(itemType, context));
			}
		}
	}

	@Override
	public void completeModelItem_Groups(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.completeModelItem_Groups(model, assignment, context, acceptor);

		ItemRegistry registry = (ItemRegistry) UIActivator.itemRegistryTracker.getService();
		if(registry!=null) {
			for(Item item : registry.getItems(context.getPrefix() + "*")) {
				if(item instanceof GroupItem) {
					ICompletionProposal completionProposal = createCompletionProposal(item.getName(), context);
					acceptor.accept(completionProposal);
				}
			}
		}
	}
}
